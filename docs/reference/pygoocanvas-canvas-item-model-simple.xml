<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
      "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="class-canvas-item-model-simple">

	<refnamediv>
		<refname>goocanvas.ItemModelSimple</refname>
		<refpurpose>The base class for the standard canvas item models.</refpurpose>
	</refnamediv>
	
	<refsect1>
		<title>Synopsis</title>
	
		<classsynopsis language="python">
			<ooclass><classname>goocanvas.ItemModelSimple</classname></ooclass>
			<ooclass><classname>gobject.GObject</classname></ooclass>
		</classsynopsis>
	</refsect1>

	<refsect1>
		<title>Ancestry</title>

<synopsis>+-- <link linkend="class-gobject">gobject.GObject</link>
    +-- <link linkend="class-canvas-item-model-simple">goocanvas.ItemModelSimple</link>
</synopsis>

	</refsect1>
	
	<refsect1 id="properties-goocanvasitemmodelsimple">
		<title>goocanvas.ItemModelSimple Properties</title>
	
		<blockquote role="properties">
			<informaltable pgwide="1" frame="none">
				<tgroup cols="3">
					<colspec column="1" colwidth="1in"/>
					<colspec column="2" colwidth="1in"/>
					<colspec column="3" colwidth="3.5in"/>
						<tbody>
						<row valign="top">
							<entry>"antialias"</entry>
							<entry>Read / Write</entry>
							<entry>The antialiasing mode to use. Default value: cairo.ANTIALIAS_DEFAULT</entry>
						</row>
                        
                        <row valign="top">
							<entry>"clip-fill-rule"</entry>
							<entry>Read / Write</entry>
							<entry>The fill rule used to determine which parts of the item are clipped.
                                   Default value: cairo.FILL_RULE_WINDING</entry>
						</row>
                        
                        <row valign="top">
							<entry>"clip-path"</entry>
							<entry>Write</entry>
							<entry>The sequence of commands describing the clip path of the item,
                                   specified as a string using the same syntax as in the
                                   Scalable Vector Graphics (SVG) path element.
                                   Default value: None</entry>
						</row>

						<row valign="top">
							<entry>"fill-color"</entry>
							<entry>Write</entry>
							<entry>The color to use to paint the interior of the item. Default value: None</entry>
						</row>

						<row valign="top">
							<entry>"fill-color-rgba"</entry>
							<entry>Write</entry>
							<entry>The color to use to paint the interior of the item, specified as a 32-bit integer value. Default value: 0</entry>
						</row>

						<row valign="top">
							<entry>"fill-pattern"</entry>
							<entry>Read / Write</entry>
							<entry>The pattern to use to paint the interior of the item.</entry>
						</row>

						<row valign="top">
							<entry>"fill-pixbuf"</entry>
							<entry>Write</entry>
							<entry>The pixbuf to use to paint the interior of the item.</entry>
						</row>

						<row valign="top">
							<entry>"fill-rule"</entry>
							<entry>Read / Write</entry>
							<entry>The fill rule used to determine which parts of the item are filled. Default value: cairo.FILL_RULE_WINDING</entry>
						</row>
                        
                        <row valign="top">
							<entry>"font"</entry>
							<entry>Read / Write</entry>
							<entry>The base font to use for the text. Default value: None</entry>
						</row>
                        
                        <row valign="top">
							<entry>"font-desc"</entry>
							<entry>Read / Write</entry>
							<entry>The attributes specifying which font to use.</entry>
						</row>

						<row valign="top">
							<entry>"line-cap"</entry>
							<entry>Read / Write</entry>
							<entry>The line cap style to use. Default value: cairo.LINE_CAP_BUTT</entry>
						</row>

						<row valign="top">
							<entry>"line-dash"</entry>
							<entry>Read / Write</entry>
							<entry>The dash pattern to use.</entry>
						</row>

						<row valign="top">
							<entry>"line-join"</entry>
							<entry>Read / Write</entry>
							<entry>The line join style to use. Default value: cairo.LINE_JOIN_MITER</entry>
						</row>

						<row valign="top">
							<entry>"line-join-miter-limit"</entry>
							<entry>Read / Write</entry>
							<entry>The smallest angle to use with miter joins, in degrees. 
								Bevel joins will be used below this limit. Allowed values: >= 0 Default value: 10.</entry>
						</row>

						<row valign="top">
							<entry>"line-width"</entry>
							<entry>Read / Write</entry>
							<entry>The line width to use for the item's perimeter. Allowed values: >= 0 Default value: 0</entry>
						</row>

						<row valign="top">
							<entry>"operator"</entry>
							<entry>Read / Write</entry>
							<entry>The compositing operator to use. Default value: cairo.OPERATOR_OVER</entry>
						</row>

						<row valign="top">
							<entry>"stroke-color"</entry>
							<entry>Write</entry>
							<entry>The color to use for the item's perimeter. Default value: None</entry>
						</row>

						<row valign="top">
							<entry>"stroke-color-rgba"</entry>
							<entry>Write</entry>
							<entry>The color to use for the item's perimeter, specified as a 32-bit integer value. Default value: 0</entry>
						</row>

						<row valign="top">
							<entry>"stroke-pattern"</entry>
							<entry>Read / Write</entry>
							<entry>The pattern to use to paint the perimeter of the item.</entry>
						</row>

						<row valign="top">
							<entry>"stroke-pixbuf"</entry>
							<entry>Write</entry>
							<entry>The pixbuf to use to draw the item's perimeter.</entry>
						</row>	
					</tbody>
				</tgroup>
			</informaltable>
		</blockquote>
	</refsect1>
	<refsect1>
		<title>Known Implementation</title>
		<para>
			<link linkend="class-canvas-item-model-simple"><classname>goocanvas.ItemModelSimple</classname></link>
			is implementated by 
			<link linkend="class-canvas-rect-model"><classname>goocanvas.RectModel</classname></link>
			<link linkend="class-canvas-ellipse-model"><classname>goocanvas.EllipseModel</classname></link>
			<link linkend="class-canvas-path-model"><classname>goocanvas.PathModel</classname></link>
			<link linkend="class-canvas-polyline-model"><classname>goocanvas.PolylineModel</classname></link>
			<link linkend="class-canvas-text-model"><classname>goocanvas.TextModel</classname></link>
			<link linkend="class-canvas-image-model"><classname>goocanvas.ImageModel</classname></link>
			<link linkend="class-canvas-group-model"><classname>goocanvas.GroupModel</classname></link>
		</para>
	</refsect1>

	<refsect1>
		<title>Implemented Interfaces</title>
		<para>
			<link linkend="class-canvas-item-model-simple"><classname>goocanvas.ItemModelSimple</classname></link>
			implements 
			<link linkend="class-canvas-item-model"><classname>goocanvas.ItemModel</classname></link>
		</para>
	</refsect1>

	<refsect1>
		<title>Description</title>
			<link linkend="class-canvas-item-model-simple"><classname>goocanvas.ItemModelSimple</classname></link> 
			is used as a base class for all of the standard canvas item models.
            It provides default implementations for many of the
            <link linkend="class-canvas-item-model"><classname>goocanvas.ItemModel</classname></link> methods.
            Subclasses of <link linkend="class-canvas-item-model-simple"><classname>goocanvas.ItemModelSimple</classname></link>
            only need to implement the create_item() method of the
            <link linkend="class-canvas-item-model"><classname>goocanvas.ItemModel</classname></link>
            interface, to create the default canvas item to view the item model.
	</refsect1>
</refentry>
